{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["toolkitVersions","value","name","OSSupportedToolkitVersions","ubuntu16_04","ubuntu18_04","App","state","os","cudaVer","scriptContent","fetching","updateSelection","_this","setState","getScriptContents","concat","OSAndCudaVer","fetch","then","x","headers","get","includes","text","TypeError","catch","err","_this2","this","react_default","a","createElement","style","padding","width","textAlign","onChange","e","target","map","undefined","indexOf","key","href","readOnly","minWidth","minHeight","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2855258.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport 'milligram/dist/milligram.min.css'\n\nconst toolkitVersions = [\n  { value: 'cuda10_0', name: '10.0 (Sept 2018)'},\n  { value: 'cuda9_2', name: '9.2 (May 2018)'},\n  { value: 'cuda9_1', name: '9.1 (Dec 2017)'},\n  { value: 'cuda9_0', name: '9.0 (Sept 2017)'}\n]\n\nconst OSSupportedToolkitVersions = {\n  ubuntu16_04: [\n    'cuda10_0',\n    'cuda9_2',\n    'cuda9_1',\n    'cuda9_0'\n  ],\n  ubuntu18_04: [\n    'cuda10_0'\n  ]\n}\n\nclass App extends Component {\n  state = {\n    os: null,\n    cudaVer: null,\n    scriptContent: null,\n    fetching: false\n  }\n\n  updateSelection = (os, cudaVer) => {\n    this.setState({\n      os,\n      cudaVer,\n      fetching: true\n    }, () => {\n      this.getScriptContents(`${os}_${cudaVer}`)\n    })\n  }\n\n  getScriptContents = (OSAndCudaVer) => {\n    fetch(`/scripts/${OSAndCudaVer}.sh`)\n    .then(x => {\n      if (x.headers.get('content-type').includes('application/x-sh')) {\n        return x.text()\n      }\n      throw new TypeError('Invalid combo')\n    })\n    .then(x => {\n      this.setState({\n        scriptContent: x,\n        fetching: false\n      })\n    })\n    .catch(err => {\n      this.setState({\n        scriptContent: null,\n        fetching: false\n      })\n    })\n  }\n\n  render () {\n    return (\n      <div style={{ padding: '30px' }}>\n        <div style={{ width: '100%', textAlign: 'center' }}>\n          <h3>\n            Cuda Bootstrap\n          </h3>\n\n          <h5>\n            Easily install CUDA on your Linux-based ML/DL machines\n          </h5>\n        </div>\n\n        <hr />\n\n        <div>\n          <form>\n            <label>\n              Operating System\n              <select onChange={(e) => this.updateSelection(e.target.value, 'default')} value={this.state.os || 'default'}>\n                <option value='default'>Select your OS</option>\n                <option value='ubuntu18_04'>Ubuntu 18.04</option>\n                <option value='ubuntu16_04'>Ubuntu 16.04</option>\n              </select>\n            </label>\n\n            <label>\n              CUDA Toolkit Version\n              <select onChange={(e) => this.updateSelection(this.state.os, e.target.value)} value={this.state.cudaVer || 'default'}>\n                <option value='default'>Select your CUDA Toolkit Version</option>\n                {\n                  toolkitVersions.map(x => {\n                    if (OSSupportedToolkitVersions[this.state.os] !== undefined && OSSupportedToolkitVersions[this.state.os].indexOf(x.value) !== -1) {\n                      return (<option key={x.value} value={x.value}>{x.name}</option>)\n                    }\n                  })\n                }\n              </select>\n            </label>\n\n            <label>\n              *Only supports x85_64 architecture for now. <br/>\n              ** <a href='https://github.com/kendricktan/cuda-bootstrap'>Don't see what you need/want? Make a PR!</a>\n            </label>\n          </form>\n        </div>\n\n        <hr />\n\n        <div>\n          <h5>One Liner Install</h5>\n          <input readOnly style={{ minWidth: '100%'}} value={\n            (this.state.fetching) ? 'Loading...' : (\n              (this.state.scriptContent === null) ? 'Not available yet...' :\n              `wget https://cuda-bootstrap.com/scripts/${this.state.os}_${this.state.cudaVer}.sh -O - | sudo -E bash`\n            )\n          } />\n\n          <h5>Script Contents</h5>\n          <textarea readOnly style={{ minWidth: '100%', minHeight: '240px' }} value={\n            (this.state.scriptContent === null) ? '' : this.state.scriptContent\n          } />\n        </div>\n\n        <hr />\n\n        <div style={{ textAlign: 'center' }}>\n          <a href='https://github.com/kendricktan/cuda-bootstrap'>github</a>\n          &nbsp;&nbsp;| made by <a href='https://kndrck.co?ref=cuda-bootstrap'>kendricktan</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport 'milligram/dist/milligram.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}